@using Microsoft.AspNetCore.SignalR
@using OAMMP.Client.Common
@using OAMMP.Common
@using OAMMP.Models
@inherits LogViewBase
<Chart ChartType="ChartType.Line" OnInitAsync="@InitAsync" @ref="@_chart"></Chart>

@code {
	private Chart? _chart;

	[Parameter]
	public ItemsPerRow ItemsPerRow { get; set; } = ItemsPerRow.Three;

	private Dictionary<string, string>? NetworkCards { get; set; }

	public override async Task ReloadData()
	{
		await UpdateNetworkCards();
		if (_chart != null)
		{
			LastTime = null;
			await _chart.Reload();
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task UpdateNetworkCards()
	{
		NetworkCards = await ServiceUtils.Instance.GetNetworkCards();
		await InvokeAsync(StateHasChanged);
	}

	public override Task RefreshData()
	{
		if (_chart != null)
		{
			return _chart.Update(ChartAction.AddData);
		}

		return Task.CompletedTask;
	}

	private async Task<ChartDataSource> InitAsync()
	{
		var dataSource = new ChartDataSource();
		dataSource.Options.Title = $"网卡监控";
		dataSource.Options.X.Title = "时间";
		dataSource.Options.Y.Title = "速率(Kb/s)";
		dataSource.Options.ShowXScales = false;
		dataSource.Options.ShowLegend = true;
		dataSource.Options.LegendPosition = ChartLegendPosition.Left;
		if (NetworkCards == null || NetworkCards.Count == 0)
		{
			return dataSource;
		}

		var arg = StartTime.HasValue && EndTime.HasValue
			? new QueryLogArgs(StartTime.Value, EndTime.Value)
			: LastTime.HasValue
				? new QueryLogArgs(LastTime.Value)
				: new QueryLogArgs(1000);
		var data = await ServiceUtils.Instance.GetNetworkLogs(arg);
		if (data == null || !data.Any()) return dataSource;
		LastTime = data.Max(x => x.Time);
		dataSource.Labels = data.Select(x => x.Time.ToString("yyyy-MM-dd HH:mm:ss")).Distinct().ToList();
		foreach (var item in data.Where(x => x.Mac != Consts.TOTAL_NETWORKS_MAC).GroupBy(x => x.Mac))
		{
			var network = NetworkCards[item.Key!];
			dataSource.Data.Add(new ChartDataset
				{
					ShowPointStyle = false,
					PointRadius = 1,
					PointStyle = ChartPointStyle.Circle,
					Tension = 0,
					BorderWidth = 1,
					Label = $"{network}_Down",
					Data = item.Select(x => (object)(x.Down / 1024d))
				});
			dataSource.Data.Add(new ChartDataset
				{
					ShowPointStyle = false,
					PointRadius = 1,
					PointStyle = ChartPointStyle.Circle,
					Tension = 0,
					BorderWidth = 1,
					Label = $"{network}_Up",
					Data = item.Select(x => (object)(x.Up / 1024d))
				});
		}

		return dataSource;
	}

}