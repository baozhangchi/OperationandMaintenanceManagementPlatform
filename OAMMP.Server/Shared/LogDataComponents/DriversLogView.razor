@using Microsoft.AspNetCore.SignalR
@using OAMMP.Common
@using OAMMP.Models
@using OAMMP.Server.Hubs
@inherits LogViewBase

@if (_drives != null)
{
    <Row ItemsPerRow="@ItemsPerRow">
        @if (_drives != null)
        {
            for (var i = 0; i < _drives.Count; i++)
            {
                var index = i;
                <Chart ChartType="ChartType.Pie" OnInitAsync="async () => { return await InitAsync(_drives[index]); }" @ref="@ChartRef"></Chart>
            }
        }
    </Row>
}

@code {

    [Parameter]
    public ItemsPerRow ItemsPerRow { get; set; } = ItemsPerRow.Three;

    readonly List<Chart?> _charts = new();
    private List<string>? _drives;

    private Chart? ChartRef
    {
        get => null;
        set => _charts.Add(value);
    }

    private async void UpdateDrives(string? clientId)
    {
        if (clientId == null)
        {
            _drives = null;
        }
        else
        {
            // _drives = await clientId
            //     .InvokeAsync<List<string>>(nameof(IMonitorClientHandler.GetPartitions), CancellationToken.None);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task<ChartDataSource> InitAsync(string drive)
    {
        var dataSource = new ChartDataSource();
        dataSource.Options.Title = $"{drive}(Gb)";
        dataSource.Options.ShowXScales = false;
        if (string.IsNullOrWhiteSpace($"{drive}")) return dataSource;
        if (string.IsNullOrEmpty(ClientId))
        {
            return dataSource;
        }

        // var data = await ClientProxy
        //     .InvokeAsync<PartitionLog>(nameof(IMonitorClientHandler.GetPartitionLog), drive.ToBase64(), CancellationToken.None);

        // dataSource.Labels = new[] { nameof(PartitionLog.Free), nameof(PartitionLog.Used) };
        // dataSource.Data.Add(new ChartDataset
        // {
        //     ShowPointStyle = false,
        //     PointRadius = 1,
        //     PointStyle = ChartPointStyle.Circle,
        //     Tension = 0,
        //     BorderWidth = 1,
        //     Data = new object[] { data.Free / 1024d / 1024d / 1024d, data.Used / 1024d / 1024d / 1024d }
        // });

        return dataSource;
    }

    public override async Task ReloadData()
    {
        UpdateDrives(ClientId);
        if (_charts.Count > 0)
        {
            foreach (var chart in _charts)
            {
                if (chart != null) await chart.Update(ChartAction.Reload);
            }
        }
    }

    public override async Task RefreshData()
    {
        if (_charts.Count > 0)
        {
            foreach (var chart in _charts)
            {
                if (chart != null) await chart.Update(ChartAction.Update);
            }
        }
    }

}