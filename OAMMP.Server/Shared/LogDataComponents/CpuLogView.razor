@using Microsoft.AspNetCore.SignalR
@using OAMMP.Client.Common
@using OAMMP.Common
@using OAMMP.Models
@inherits LogViewBase

<LineChart @ref="_lineChart"></LineChart>

@code {
	private LineChart _lineChart = default!;
	private LineChartOptions _lineChartOptions = default!;
	private ChartData _chartData = default!;

	protected override void OnInitialized()
	{
		_chartData = new ChartData {  };
		_lineChartOptions = new() { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _lineChart.InitializeAsync(_chartData, _lineChartOptions);
		}
		await base.OnAfterRenderAsync(firstRender);
	}

    // private async Task<ChartData> InitAsync()
    // {
    //     var dataSource = new ChartDataSource();
    //     dataSource.Options.Title = "CPU监控";
    //     dataSource.Options.X.Title = "时间";
    //     dataSource.Options.Y.Title = "使用率(%)";
    //     dataSource.Options.ShowXScales = false;
    //     dataSource.Options.ShowLegend = false;
    //     if (string.IsNullOrEmpty(ConnectionId))
    //     {
    //         return dataSource;
    //     }

    //     var arg = StartTime.HasValue && EndTime.HasValue
    //         ? new QueryLogArgs(StartTime.Value, EndTime.Value)
    //         : LastTime.HasValue
    //             ? new QueryLogArgs(LastTime.Value)
    //             : new QueryLogArgs(1000);
    //     var data = await ServiceUtils.Instance.GetCpuLogs(ConnectionId, arg);
    //     if (data == null || !data.Any()) return dataSource;
    //     dataSource.Labels = data.Select(x => x.Time.ToString("yyyy-MM-dd HH:mm:ss")).ToList();
    //     LastTime = data.Max(x => x.Time);

    //     dataSource.Data.Add(new ChartDataset
    //     {
    //         ShowPointStyle = false,
    //         PointRadius = 1,
    //         PointStyle = ChartPointStyle.Circle,
    //         Tension = 0,
    //         BorderWidth = 1,
    //         Label = "CPU",
    //         Data = data.Select(x => (object)(x.Used * 100))
    //     });
    //     return dataSource;
    // }



    public override Task ReloadData()
    {
	    LastTime = null;


        return Task.CompletedTask;
    }

    public override Task RefreshData()
    {
        if (_chart != null)
        {
            return _chart.Update(ChartAction.AddData);
        }

        return Task.CompletedTask;
    }

}