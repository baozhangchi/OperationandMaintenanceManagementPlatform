@using OMMP.WebClient.Models
@using OMMP.Models
@using OMMP.WebClient.Hubs
@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.SignalR
@using OMMP.Common

<Table TItem="MonitoringServicePackage" ShowLineNo="true"
       TableSize="TableSize.Normal" EditDialogShowMaximizeButton="false" EditDialogIsDraggable="true" EditDialogSize="Size.Medium"
       IsStriped="true" IsBordered="true" OnSaveAsync="@SaveAsync" AddModalTitle="上传新版本" OnQueryAsync="@QueryAsync" ShowExtendButtons="false" ShowSkeleton="true" ShowEditButton="false" ShowDeleteButton="false"
       ShowToolbar="true">
    <TableColumns>
        <TableColumn @bind-Field="@context.Version"/>
        <TableColumn @bind-Field="@context.OriginFileName"/>
        <TableColumn @bind-Field="@context.FileSize"/>
        <TableColumn @bind-Field="@context.UploadTime"/>
    </TableColumns>
    <EditTemplate>
        <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Inline">
            <BootstrapInput @bind-Value="@context.Version"/>
            <ButtonUpload TValue="string" OnChange="@OnClickToUpload" ShowUploadFileList="true" BrowserButtonText="选择新版本" IsDirectory="false" Accept="application/zip" ShowProgress="true" BrowserButtonIcon="fa-solid fa-cloud-arrow-up" class="mt-3"></ButtonUpload>
        </Row>

    </EditTemplate>
</Table>

@code {
    private UploadFile _file;

    [Inject]
    IServiceProvider ServiceProvider { get; set; }

    [Inject]
    GlobalCache GlobalCache { get; set; }

    [Inject]
    [NotNull]
    private IHubContext<MonitoringHub> HubContext { get; set; }


    private async Task OnClickToUpload(UploadFile file)
    {
        _file = file;
        await Task.CompletedTask;
    }

    private async Task<QueryData<MonitoringServicePackage>> QueryAsync(QueryPageOptions arg)
    {
        var repository = ServiceProvider.GetRequiredService<Repository<MonitoringServicePackage>>();
        var data = await repository.GetListAsync();
        return new QueryData<MonitoringServicePackage>()
        {
            Items = data,
            TotalCount = data.Count
        };
    }

    private async Task<bool> SaveAsync(MonitoringServicePackage package, ItemChangedType arg2)
    {
        var folder = Path.Combine(GlobalCache.DataFolder, "packages");
        if (!Directory.Exists(folder))
        {
            Directory.CreateDirectory(folder);
        }

        if (_file == null)
        {
            return false;
        }
        var fileName = Path.Combine(folder, Path.GetTempFileName());
        var result = await _file.SaveToFileAsync(fileName);
        if (!result)
        {
            return false;
        }
        var repository = ServiceProvider.GetRequiredService<Repository<MonitoringServicePackage>>();
        result = await repository.InsertAsync(new MonitoringServicePackage()
        {
            FileName = fileName,
            FileSize = _file.Size,
            UploadTime = DateTime.Now,
            Version = package.Version,
            OriginFileName = _file.GetFileName()
        });

        await HubContext.Clients.All.SendAsync(nameof(IMonitoringClientHub.UpdateApplication), new ReadOnlyMemory<byte>(await File.ReadAllBytesAsync(fileName)));
        return result;
    }

}